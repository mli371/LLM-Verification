# Large prompt set for numeric-heavy outputs (for Benford & Zipf analysis)
# Lines starting with '#' are comments and will be ignored by the collector.

# Simple numeric lists
List 5 random integers between 1 and 9.
List 10 random integers between 1 and 99.
List 15 random integers between 1 and 999.
List 20 random integers between 1 and 9999.
Provide 12 random prime numbers under 1000.
Provide 10 random even numbers between 2 and 200.
Provide 10 random odd numbers between 1 and 199.
Generate a list of 25 random integers between 1 and 1000, sorted ascending.
Generate a list of 25 random integers between 1 and 1000, sorted descending.
List 30 random integers where each is between 100 and 999.

# Ranges and sequences
Create an arithmetic sequence of 20 numbers starting at 7 with difference 13.
Create a geometric sequence of 15 numbers starting at 3 with ratio 2.
List the first 50 triangular numbers.
List the first 40 Fibonacci numbers.
Give 25 consecutive dates (YYYY-MM-DD) starting from 2024-01-01 and a random integer (1-1000) for each date, as CSV rows.
Produce 30 timestamps (ISO 8601) each paired with a temperature reading between -20.0 and 45.0 (one decimal), CSV style.

# Statistical datasets
Generate 100 sample exam scores (integers 0-100) for students, comma-separated.
Generate 200 simulated daily sales amounts (two decimals) in USD between 0.50 and 499.99, one per line.
Provide 150 simulated household electricity readings (kWh) with two decimals between 0.10 and 50.00.
Create 120 population counts for fictional towns (integers between 50 and 120000), one per line.

# Financial-like data
Create a mock invoice table with 20 rows: invoice_id (sequential), amount (USD, 2 decimals, 10.00-5000.00), tax (2 decimals), total.
Produce 30 fictional stock closing prices (two decimals) for a made-up company over 30 days.
Generate 50 random credit-card-style 4-digit blocks (but do not include real card numbers), example: 1234 5678 9012 3456 format but randomized blocks.

# Measurements & sensor data
Provide 100 simulated sensor readings (floating point) between 0.001 and 1000.0 with 3 decimal places.
Generate 80 lat-long coordinate pairs within valid ranges, one pair per line, comma-separated.
Produce 60 wind speed readings (m/s) with one decimal between 0.0 and 60.0.

# Percentages and ratios
List 40 percentages with one decimal between 0.1% and 99.9%.
Provide 35 ratios as 'x:y' where x and y are integers between 1 and 1000.

# Counts and frequencies
Generate a frequency table (word,count) for 30 fictional words where counts are integers between 1 and 10000.
Create 50 lines of 'item_id,frequency' where item_id is an integer 1000-9999 and frequency 1-5000.

# Structured numeric outputs (CSV/TSV)
Provide a CSV with columns: id,age,height_cm,weight_kg for 100 fictional people (age 0-100, height 50-210, weight 2.0-200.0 with one decimal).
Create a CSV with columns: product_id,units_sold,unit_price,region for 120 rows. Use realistic ranges.

# Lists with mixed text and numbers
Give 30 examples of product reviews with a star rating (1-5) and a numeric word count for each review.
Provide 40 sample exam results with student ID (6-digit), score (0-100), and percentile (0-100.0).

# Time series and logs
Generate 200 lines of 'timestamp,requests' where requests is 0-2000 per minute.
Produce 120 lines of 'date,visitors,pageviews' with integers where pageviews >= visitors.

# Mathematical outputs
Compute and list 30 values of sin(x) for x = 0, pi/30, 2pi/30, ... with 6 decimal places; include both the x (rad) and value.
Provide 40 outputs: for each n from 1 to 40 output 'n,n^2,n^3' as CSV.

# Random document-style numeric data
Write 25 short weather report lines that include temperature, humidity percentage, and precipitation mm.
Write 30 short basketball box-score lines: player_name,points,rebounds,assists where points 0-60.

# Domain-specific examples
Generate 60 fake census rows with household_id, num_residents, median_income, num_children.
Create 50 mock medical lab results with patient_id, test_name, value, normal_range_min, normal_range_max.

# Zipf-friendly textual prompts (encourage natural language)
Write a 200-word fictional news paragraph about a city's economy (no real people), dense natural-language (this helps Zipf analysis).
Write a 200-word fictional product description for a household appliance using varied vocabulary.
Provide 10 short stories (100 words each) about travel that use diverse vocabulary and include numeric dates and quantities.

# Prompts to encourage varied leading digits
List 100 random numbers drawn uniformly from 1 to 10,000.
List 100 random numbers drawn logarithmically between 1 and 10^6 (more small leading digits).
Provide 100 numbers sampled from a power-law distribution between 1 and 1e6 (to mimic Benford-like behavior).

# Financial and formatted numbers
Create a quarterly earnings table for 8 quarters: quarter, revenue (USD with commas and cents), expenses, net_income.
Generate 50 invoice totals with currency and thousands separators (e.g., $12,345.67) and their tax percentages.
List 100 monetary values in EUR using comma as decimal separator (e.g., 1.234,56 €) to vary numeric formats.

# Geographic and population
Provide population counts for 200 fictional cities with values ranging from 100 to 10,000,000, comma-separated.
Generate 100 city populations biased toward small towns (many values < 5000) to test leading-digit skew.

# Scientific and measurements
List 120 measurements in scientific notation with varied exponents between -12 and 9.
Create 80 pH measurements with one decimal between 0.0 and 14.0.

# Formatted identifiers and serials
Generate 100 serial numbers in the format ABC-12345-678 where digits vary and leading digits are non-uniform.
Provide 100 product codes with embedded numbers like PROD-00123, SKU-98765.

# Dates, durations and time intervals
Produce 120 durations in seconds and formatted H:M:S pairs, one per line.
Generate 90 timestamps with milliseconds and accompanying numeric latency values in ms.

# Zipf-heavy natural language
Write a 300-word investigative-style article about market trends (fictional) that uses diverse vocabulary and many numeric references (percentages, years, counts).
Write 50 short review blurbs (30-50 words) with star ratings and numeric word counts; vary language richness to help Zipf.

# Control & edge cases
Create 100 numbers that are all powers of two between 1 and 2^30.
List 100 numbers that are all multiples of 1000 (e.g., 1000, 2000, ...), to test non-Benford behavior.

# Mix of languages and formats
Provide 40 amounts in Japanese Yen (no decimals) with commas: e.g., ¥1,234,567.
Give 30 numbers written in words and digits mixing: e.g., "one thousand (1,000)", "fifty (50)".

# High-density numeric prompts
For 30 items, produce a JSON object with 15 numeric fields each (random floats/ints) — output one JSON per line.
Generate a CSV of 200 rows with 10 numeric columns (randomly distributed across large ranges).

# End appended prompts

# --- Life-like prompts to generate realistic numbers + natural language ---
Write a retail receipt for a grocery purchase with at least 12 line items: item name, quantity, unit price, line total, tax, subtotal, total, date and time.
Write 20 mock bank transaction lines (date, description, debit/credit amount, balance) resembling a monthly statement.
Generate a mock utility bill (electricity) for a household with daily meter readings for 30 days plus charges, taxes, and totals in a table.
Produce 15 lines of website access logs: timestamp, user_id, page, response_time_ms, bytes_sent.
Create a CSV of 100 product sales rows with columns: product_id, units_sold, price_usd, region, date_sold.
Write 50 rows of IoT sensor logs: ISO timestamp, sensor_id, temperature_c, humidity_pct, battery_v.
Generate a mock restaurant bill with itemized prices, quantities, tip percentage, and grand total (include currency format with commas).
Produce a simplified population census extract: household_id, address_fragment, num_residents, median_age, median_income.
Create 30 medical lab test results with patient_id, test_name, value, unit, reference_range_min, reference_range_max.
Provide a 200-word neighborhood crime report paragraph that includes counts and dates (e.g., "three incidents on 2024-06-05, 2 burglaries...").
Generate 20 lines of inventory counts: sku, warehouse_id, on_hand, reserved, available.
Write 40 short product reviews (20-40 words) each with a star rating (1-5) and helpful_count (integer) and include occasional numeric discounts or coupon codes.
Create 60 lines of mock medical prescriptions with dosage amounts like 'Take 2 tablets (500 mg) twice daily for 7 days' — include numeric doses and durations.
Produce 80 entries of transportation ridership data: date, route_id, riders, capacity, percent_full.
Generate a weekly sales summary paragraph for a small shop including totals, percent change vs previous week, number of transactions, and average basket size.
Create 40 rows representing scientific experiment readings: sample_id, concentration_mg_L, pH, temperature_C, timestamp.
Produce 50 entries of phone-call CDR-like logs: call_start_iso, duration_seconds, caller_id, callee_id, bytes_transferred.
Generate a paragraph describing a travel itinerary with dates, distances (km), durations (hours), and approximate costs.
Create 30 lines of payroll entries: employee_id, gross_pay, tax_withheld, net_pay, pay_date.
Write 25 weather station daily summaries for a month with date, high_c, low_c, precipitation_mm, wind_speed_m_s.

# End life-like prompts

# Prompts that tend NOT to follow Benford (for control)
List 100 numbers all between 500 and 599.
List 100 telephone-style numbers that all start with the same leading digit.
Provide 80 two-digit numbers where the first digit is intentionally uniform 1-9 (control set).

# Meta and multiple-item prompts
For each of the following 20 items, provide 10 sample numeric values: "temperature,price,quantity" (so output will be larger lists).
Generate 50 JSON objects (one per line) each with keys: id (uuid-like numeric id), value (float 0.01-10000.00), count (int 0-1000).

# Prompt variants to increase numeric density
Return a paragraph describing a retail receipt with at least 12 numeric fields (prices, quantities, taxes, totals, dates, times).
Produce a recipe with ingredient quantities for 15 ingredients including weights in grams, volumes in ml, and temperatures in degrees.

# Edge-case numeric forms
List 40 numbers in scientific notation between 1e-6 and 1e6.
Give 40 monetary amounts with currency symbols and commas, e.g., $1,234.56.
List 50 percentages written with words and numbers ("twenty percent (20%)").

# Misc
Generate 100 random integers between -1000 and 1000 (including negatives and zeros).
Create 60 lines with serial numbers that contain digits and letters (make sure digits are varied).

# End of prompts
# You can duplicate these prompts or call the runner with --n-per-prompt higher to multiply samples per prompt.
